[{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/bin/dev-env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/jest.config.js","messages":[],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/lib/dev-env-stack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/dev-env-stack.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":7,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":8,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":17,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":20,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":27,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":37,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":38,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":39,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":40,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":41,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":52,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":53,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":54,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":56,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":67,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":68,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":69,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":69,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":70,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":73,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":80,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":85,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":85,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":86,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":87,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":90,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":97,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":101,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":105,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":106,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":107,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":111,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":115,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":116,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":119,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":128,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":135,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":139,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":139,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":149,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":154,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":154,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":156,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":157,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":158,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":159,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":159,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":162,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":168,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":172,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":172,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":175,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":179,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":185,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":186,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":187,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":190,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":197,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":197,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":201,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":202,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":202,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":206,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":206,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":209,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":209,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":216,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":217,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":219,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":226,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":226,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":229,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":229,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":234,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":234,"endColumn":9}],"suppressedMessages":[],"errorCount":64,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { App } from 'aws-cdk-lib';\nimport { Template } from 'aws-cdk-lib/assertions';\nimport { DevEnvStack } from '../lib/dev-env-stack';\n\ndescribe('DevEnvStack', () => {\n  beforeEach(() => {\n    delete process.env.ALLOWED_IP;\n    delete process.env.SSH_PORT;\n  });\n\n  test('Stack synthesizes successfully', () => {\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStack');\n    const template = Template.fromStack(stack);\n    expect(template).toBeDefined();\n  });\n\n  test('EC2インスタンスが作成されていること', () => {\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStack');\n    const template = Template.fromStack(stack);\n    template.resourceCountIs('AWS::EC2::Instance', 1);\n  });\n\n  test('ALLOWED_IP/SSH_PORTの組み合わせによるセキュリティグループ挙動', () => {\n    // 1. ALLOWED_IP/SSH_PORT両方指定 → 指定IP・指定ポートのみ許可\n    process.env.ALLOWED_IP = '203.0.113.1/32';\n    process.env.SSH_PORT = '2222';\n    let app = new App();\n    let stack = new DevEnvStack(app, 'TestStack1');\n    let template = Template.fromStack(stack);\n    let sg = template.findResources('AWS::EC2::SecurityGroup');\n    let sgResource = Object.values(sg)[0];\n    const ingress1 = sgResource.Properties.SecurityGroupIngress;\n    expect(ingress1).toBeDefined();\n    expect(ingress1.length).toBe(1);\n    expect(ingress1[0].FromPort).toBe(2222);\n    expect(ingress1[0].ToPort).toBe(2222);\n    expect(ingress1[0].CidrIp).toBe('203.0.113.1/32');\n\n    // 2. SSH_PORTのみ指定 → すべてのIPに対してそのポートを許可\n    delete process.env.ALLOWED_IP;\n    process.env.SSH_PORT = '2022';\n    app = new App();\n    stack = new DevEnvStack(app, 'TestStack2');\n    template = Template.fromStack(stack);\n    sg = template.findResources('AWS::EC2::SecurityGroup');\n    sgResource = Object.values(sg)[0];\n    const ingress2 = sgResource.Properties.SecurityGroupIngress;\n    expect(ingress2).toBeDefined();\n    expect(ingress2.length).toBe(1);\n    expect(ingress2[0].FromPort).toBe(2022);\n    expect(ingress2[0].ToPort).toBe(2022);\n    expect(ingress2[0].CidrIp).toBe('0.0.0.0/0');\n\n    // 3. どちらも未指定 → Tailscaleサブネットから22番ポートのみ許可\n    delete process.env.ALLOWED_IP;\n    delete process.env.SSH_PORT;\n    app = new App();\n    stack = new DevEnvStack(app, 'TestStack3');\n    template = Template.fromStack(stack);\n    sg = template.findResources('AWS::EC2::SecurityGroup');\n    sgResource = Object.values(sg)[0];\n    const ingress3 = sgResource.Properties.SecurityGroupIngress;\n    expect(ingress3.length).toBe(1);\n    expect(ingress3[0].FromPort).toBe(22);\n    expect(ingress3[0].ToPort).toBe(22);\n    expect(ingress3[0].CidrIp).toBe('100.64.0.0/10');\n  });\n\n  test('Lambdaのコード・環境変数・IAM権限・CloudWatchアラーム・EventBridgeルールを検証', () => {\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStack');\n    const template = Template.fromStack(stack);\n\n    // Lambda\n    const lambdas = template.findResources('AWS::Lambda::Function');\n    expect(Object.keys(lambdas).length).toBe(1);\n    const lambdaResource = Object.values(lambdas)[0] as unknown;\n    if (!lambdaResource || typeof lambdaResource !== 'object')\n      throw new Error('Lambdaリソースが不正');\n    const lambdaProps = (lambdaResource as { Properties: Record<string, unknown> }).Properties;\n    expect(lambdaProps.Handler).toBe('index.handler');\n    expect(lambdaProps.Runtime).toMatch(/python/i);\n    expect(\n      (lambdaProps.Environment as { Variables: Record<string, unknown> }).Variables.INSTANCE_ID,\n    ).toBeDefined();\n    expect((lambdaProps.Code as { ZipFile: string }).ZipFile).toMatch(/stop_instances/);\n\n    // LambdaのIAM権限\n    const policies = template.findResources('AWS::IAM::Policy');\n    const lambdaPolicy = Object.values(policies).find((p) =>\n      JSON.stringify(p).includes('ec2:StopInstances'),\n    );\n    expect(lambdaPolicy).toBeDefined();\n\n    // CloudWatchアラーム\n    const alarms = template.findResources('AWS::CloudWatch::Alarm');\n    expect(Object.keys(alarms).length).toBe(1);\n    const alarm = Object.values(alarms)[0] as unknown;\n    if (!alarm || typeof alarm !== 'object') throw new Error('Alarmリソースが不正');\n    const alarmProps = (alarm as { Properties: Record<string, unknown> }).Properties;\n    expect(alarmProps.Threshold).toBe(5);\n    expect(alarmProps.EvaluationPeriods).toBe(6);\n    expect(alarmProps.MetricName).toBe('CPUUtilization');\n\n    // EventBridgeルール\n    const rules = template.findResources('AWS::Events::Rule');\n    expect(Object.keys(rules).length).toBe(1);\n    const rule = Object.values(rules)[0] as unknown;\n    if (!rule || typeof rule !== 'object') throw new Error('EventBridgeルールが不正');\n    const ruleProps = (rule as { Properties: Record<string, unknown> }).Properties;\n    expect(ruleProps.EventPattern).toBeDefined();\n    expect(JSON.stringify(ruleProps.EventPattern)).toMatch(/CloudWatch Alarm State Change/);\n  });\n\n  test('CloudFormationテンプレートの全リソースを出力（デバッグ用）', () => {\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStack');\n    const template = Template.fromStack(stack);\n    if (process.env.DEBUG === 'true') {\n      console.log(JSON.stringify(template.toJSON(), null, 2));\n    }\n  });\n\n  test('keyNameが指定された場合にEC2インスタンスに反映される', () => {\n    process.env.KEY_PAIR_NAME = 'my-key';\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStackKeyPair');\n    const template = Template.fromStack(stack);\n    const resources = template.findResources('AWS::EC2::Instance');\n    const instance = Object.values(resources)[0];\n    expect(instance.Properties.KeyName).toBe('my-key');\n    delete process.env.KEY_PAIR_NAME;\n  });\n\n  test('keyNameが未指定の場合はEC2インスタンスにKeyNameプロパティが含まれない（keys/に.pemが無い場合）', () => {\n    // keys/ディレクトリを一時退避\n    const keyDir = path.join(__dirname, '../keys');\n    const tmpDir = path.join(__dirname, '../keys_tmp');\n    if (fs.existsSync(keyDir)) fs.renameSync(keyDir, tmpDir);\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStackNoKey');\n    const template = Template.fromStack(stack);\n    const resources = template.findResources('AWS::EC2::Instance');\n    const instance = Object.values(resources)[0];\n    expect(instance.Properties.KeyName).toBeUndefined();\n    // keys/ディレクトリを元に戻す\n    if (fs.existsSync(tmpDir)) fs.renameSync(tmpDir, keyDir);\n  });\n\n  test('user-data.shにTailscale自動インストール・認証コマンドが含まれる', () => {\n    const userData = fs.readFileSync(path.join(__dirname, '../templates/user-data.sh'), 'utf8');\n    expect(userData).toMatch(/tailscale/);\n    expect(userData).toMatch(/tailscaled/);\n    expect(userData).toMatch(/TAILSCALE_AUTHKEY/);\n    expect(userData).toMatch(/tailscale up/);\n  });\n\n  test('PROJECT_BUCKET_NAMEが正しい場合にS3バケットが作成される', () => {\n    process.env.PROJECT_BUCKET_NAME = 'valid-bucket-123';\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStackS3');\n    const template = Template.fromStack(stack);\n    const buckets = template.findResources('AWS::S3::Bucket');\n    expect(Object.keys(buckets).length).toBe(1);\n    delete process.env.PROJECT_BUCKET_NAME;\n  });\n\n  test('PROJECT_BUCKET_NAMEが不正な場合は例外が投げられる', () => {\n    process.env.PROJECT_BUCKET_NAME = 'Invalid_Bucket!';\n    const app = new App();\n    expect(() => new DevEnvStack(app, 'TestStackS3Invalid')).toThrow(/S3バケット名が不正/);\n    delete process.env.PROJECT_BUCKET_NAME;\n  });\n\n  test('EC2インスタンスのEBS設定が正しい', () => {\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStackEBS');\n    const template = Template.fromStack(stack);\n    const resources = template.findResources('AWS::EC2::Instance');\n    const instance = Object.values(resources)[0];\n    expect(instance.Properties.BlockDeviceMappings[0].Ebs.VolumeType).toBe('gp3');\n    expect(instance.Properties.BlockDeviceMappings[0].Ebs.DeleteOnTermination).toBe(true);\n    expect(instance.Properties.BlockDeviceMappings[0].Ebs.VolumeSize).toBe(100);\n  });\n\n  test('S3バケット指定時のみIAMロールにS3権限が追加される', () => {\n    process.env.PROJECT_BUCKET_NAME = 'valid-bucket-123';\n    const app = new App();\n    const stack = new DevEnvStack(app, 'TestStackS3Policy');\n    const template = Template.fromStack(stack);\n    const policies = template.findResources('AWS::IAM::Policy');\n    const s3Policy = Object.values(policies).find((p) => JSON.stringify(p).includes('s3:*'));\n    expect(s3Policy).toBeDefined();\n    delete process.env.PROJECT_BUCKET_NAME;\n  });\n\n  test('user-data.shが存在しない場合は例外が投げられる', () => {\n    jest.spyOn(fs, 'readFileSync').mockImplementationOnce(() => {\n      throw new Error('ENOENT: no such file or directory');\n    });\n    const app = new App();\n    expect(() => new DevEnvStack(app, 'TestStackUserDataMissing')).toThrow(/ENOENT/);\n  });\n\n  test('keys/内の.pemファイル名がkeyNameに使われる & AWS側存在チェック警告が出る', async () => {\n    // テスト用のダミー.pemファイルを作成\n    const keyDir = path.join(__dirname, '../keys');\n    const testPem = path.join(keyDir, 'test-key.pem');\n    if (!fs.existsSync(keyDir)) fs.mkdirSync(keyDir);\n    fs.writeFileSync(testPem, 'dummy');\n    // モック: aws-sdkのdescribeKeyPairsを必ずrejectする\n    jest.resetModules(); // モジュールキャッシュをクリア\n    jest.doMock('aws-sdk', () => {\n      return {\n        EC2: jest.fn().mockImplementation(() => ({\n          describeKeyPairs: () => ({ promise: () => Promise.reject(new Error('Not found')) }),\n        })),\n      };\n    });\n    const app = new App();\n    // 警告が出るか確認（非同期なのでsetTimeoutで待つ）\n    const warnSpy = jest.spyOn(console, 'warn').mockImplementation();\n    new DevEnvStack(app, 'TestStackKeyPair');\n    await new Promise((resolve) => setTimeout(resolve, 300)); // 待機時間を200→300msに延長\n    expect(warnSpy.mock.calls.some((call) => String(call[0]).includes('AWS EC2にキーペア'))).toBe(\n      true,\n    );\n    warnSpy.mockRestore();\n    fs.unlinkSync(testPem);\n    jest.dontMock('aws-sdk');\n  });\n\n  // S3バケットは環境変数/Contextで指定時のみ作成されるため、ここでは省略\n  // UserDataの内容検証はCDKのTemplate APIでは難しいため、別途スタブ化やモックでの検証が必要\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/ec2_ssh_start.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeAll' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":36,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":43,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'afterAll' is not defined.","line":50,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":50,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":59,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":72,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":72,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":73,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":75,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":80,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":96,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":96,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":97,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":103,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":112,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":113,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":114,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":115,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":9}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport child_process from 'child_process';\nimport { loadConfig } from '../tools/ec2_ssh_start';\n\ndescribe('tools/ec2_ssh_start.sh', () => {\n  const configPath = path.join(__dirname, '../tools/ec2_ssh_config');\n  const scriptPath = path.join(__dirname, '../tools/ec2_ssh_start.sh');\n  const backupPath = configPath + '.bak';\n  const mockDir = path.join(__dirname, '../tools/__mocks__');\n  const origPath = process.env.PATH;\n\n  beforeAll(() => {\n    // __mocks__ ディレクトリ作成\n    if (!fs.existsSync(mockDir)) fs.mkdirSync(mockDir);\n    // aws モック\n    fs.writeFileSync(\n      path.join(mockDir, 'aws'),\n      `#!/bin/bash\\n\\n# 引数をすべてログに出力（デバッグ用）\\necho \"[MOCK AWS] $@\" >&2\\nif [[ $1 == 'ec2' && $2 == 'describe-instances' ]]; then\\n  if [[ $@ == *State.Name* ]]; then\\n    echo running\\n  elif [[ $@ == *PublicIpAddress* ]]; then\\n    echo 203.0.113.10\\n  fi\\n  exit 0\\nelif [[ $1 == 'ec2' && $2 == 'start-instances' ]]; then\\n  exit 0\\nfi\\nexit 0\\n`,\n    );\n    fs.chmodSync(path.join(mockDir, 'aws'), 0o755);\n    // ssh モック\n    fs.writeFileSync(path.join(mockDir, 'ssh'), '#!/bin/bash\\nexit 0\\n');\n    fs.chmodSync(path.join(mockDir, 'ssh'), 0o755);\n    // sleep モック\n    fs.writeFileSync(path.join(mockDir, 'sleep'), '#!/bin/bash\\nexit 0\\n');\n    fs.chmodSync(path.join(mockDir, 'sleep'), 0o755);\n    // aws-configure モック（aws configure呼び出し時にハングしないように）\n    fs.writeFileSync(\n      path.join(mockDir, 'aws-configure'),\n      '#!/bin/bash\\necho \"[MOCK aws configure]\"\\nexit 0\\n',\n    );\n    fs.chmodSync(path.join(mockDir, 'aws-configure'), 0o755);\n  });\n\n  beforeEach(() => {\n    // バックアップ\n    if (fs.existsSync(configPath)) fs.copyFileSync(configPath, backupPath);\n    // PATH先頭に__mocks__追加\n    process.env.PATH = mockDir + path.delimiter + origPath;\n    process.env.TEST_MODE = '1';\n  });\n  afterEach(() => {\n    // 復元\n    if (fs.existsSync(backupPath)) fs.copyFileSync(backupPath, configPath);\n    if (fs.existsSync(backupPath)) fs.unlinkSync(backupPath);\n    process.env.PATH = origPath;\n    delete process.env.TEST_MODE;\n  });\n  afterAll(() => {\n    // モック削除\n    fs.readdirSync(mockDir).forEach((f) => {\n      const p = path.join(mockDir, f);\n      if (fs.existsSync(p)) fs.unlinkSync(p);\n    });\n    if (fs.existsSync(mockDir)) fs.rmdirSync(mockDir);\n  });\n\n  test('設定ファイルが無い場合は自動生成されexitする', (done) => {\n    console.time('設定ファイルが無い場合');\n    if (fs.existsSync(configPath)) fs.unlinkSync(configPath);\n    const env = { ...process.env, PATH: mockDir + path.delimiter + origPath };\n    console.log('テスト実行時PATH:', env.PATH);\n    const result = child_process.spawnSync('zsh', [scriptPath], {\n      encoding: 'utf-8',\n      timeout: 10000,\n      env,\n    });\n    console.log('stdout:', result.stdout);\n    console.log('stderr:', result.stderr);\n    console.log('error:', result.error);\n    expect(result.stdout).toMatch(/自動生成/);\n    expect(fs.existsSync(configPath)).toBe(true);\n    // ステータスコードは1であることを明示的にチェック\n    expect(result.status).toBe(1);\n    console.timeEnd('設定ファイルが無い場合');\n    done();\n  }, 10000);\n\n  test('インスタンス起動からSSHまで高速で完了する', (done) => {\n    console.time('インスタンス起動からSSHまで');\n    fs.writeFileSync(\n      configPath,\n      'INSTANCE_ID=\"i-xxx\"\\nKEY_PATH=\"../keys/my-key.pem\"\\nUSER=\"ec2-user\"\\nREGION=\"ap-northeast-1\"\\nAWS_ACCESS_KEY_ID=\"dummy\"\\nAWS_SECRET_ACCESS_KEY=\"dummy\"\\nAWS_DEFAULT_REGION=\"ap-northeast-1\"\\n',\n    );\n    const env = { ...process.env, PATH: mockDir + path.delimiter + origPath };\n    console.log('テスト実行時PATH:', env.PATH);\n    const result = child_process.spawnSync('zsh', [scriptPath], {\n      encoding: 'utf-8',\n      timeout: 10000,\n      env,\n    });\n    console.log('stdout:', result.stdout);\n    console.log('stderr:', result.stderr);\n    console.log('error:', result.error);\n    expect(result.stdout).toMatch(/SSH接続/);\n    expect(result.status).toBe(0);\n    console.timeEnd('インスタンス起動からSSHまで');\n    done();\n  }, 10000);\n});\n\nit('SSH接続コマンドを生成できる', () => {\n  const configPath = path.join(__dirname, '../tools/ec2_ssh_config');\n  // テスト用設定ファイルを必ず作成\n  fs.writeFileSync(\n    configPath,\n    'INSTANCE_ID=\"i-1234567890abcdef0\"\\nKEY_PATH=\"~/.ssh/test-key.pem\"\\nUSER=\"ec2-user\"\\nREGION=\"ap-northeast-1\"\\n',\n    { encoding: 'utf-8' },\n  );\n  const cfg = loadConfig(configPath);\n  expect(cfg.INSTANCE_ID).toBe('i-1234567890abcdef0');\n  expect(cfg.KEY_PATH).toBe('~/.ssh/test-key.pem');\n  expect(cfg.USER).toBe('ec2-user');\n  expect(cfg.REGION).toBe('ap-northeast-1');\n  // テスト後に必ず削除\n  if (fs.existsSync(configPath)) fs.unlinkSync(configPath);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/ec2_ssh_start/unit.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":7,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":8,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":13,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":26,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":37,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":42,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":44,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":45,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":48,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":50,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":50,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":51,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":52,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":55,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":56,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":59,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":64,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":66,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":69,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":69,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":71,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":74,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":76,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":79,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":82,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":86,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":90,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":93,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":94,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":98,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":100,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":103,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":105,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":108,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":111,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":116,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":119,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":11}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { spawnSync } from 'child_process';\nimport os from 'os';\nimport * as ec2ssh from '../../tools/ec2_ssh_start';\n\njest.mock('child_process');\nconst mockSpawnSync = spawnSync as unknown as jest.Mock<\n  { status: number; stdout: string; stderr: string },\n  string[]\n>;\n\ndescribe('ec2_ssh_start.ts function unit tests', () => {\n  const configPath = path.join(__dirname, '../../tools/ec2_ssh_config');\n  const dummyConfig = {\n    INSTANCE_ID: 'i-xxx',\n    KEY_PATH: '../keys/my-key.pem',\n    USER: 'ec2-user',\n    REGION: 'ap-northeast-1',\n    AWS_ACCESS_KEY_ID: 'dummy',\n    AWS_SECRET_ACCESS_KEY: 'dummy',\n    AWS_DEFAULT_REGION: 'ap-northeast-1',\n  };\n\n  let tempKeyPath: string;\n  beforeEach(() => {\n    mockSpawnSync.mockReset();\n    // テスト用一時鍵ファイルを作成\n    tempKeyPath = path.join(os.tmpdir(), `test-key-${Date.now()}`);\n    fs.writeFileSync(\n      configPath,\n      Object.entries({ ...dummyConfig, KEY_PATH: tempKeyPath })\n        .map(([k, v]) => `${k}=\"${v}\"`)\n        .join('\\n') + '\\n',\n    );\n  });\n  afterEach(() => {\n    if (fs.existsSync(configPath)) fs.unlinkSync(configPath);\n    if (tempKeyPath && fs.existsSync(tempKeyPath)) fs.unlinkSync(tempKeyPath);\n  });\n\n  test('loadConfig: 設定ファイルを正しく読み込む', () => {\n    const cfg = ec2ssh.loadConfig(configPath);\n    expect(cfg.INSTANCE_ID).toBe('i-xxx');\n    expect(cfg.USER).toBe('ec2-user');\n  });\n\n  test('setupAwsCredentials: 認証情報がセットされる', () => {\n    ec2ssh.setupAwsCredentials(dummyConfig);\n    expect(process.env.AWS_ACCESS_KEY_ID).toBe('dummy');\n    expect(process.env.AWS_SECRET_ACCESS_KEY).toBe('dummy');\n    expect(process.env.AWS_DEFAULT_REGION).toBe('ap-northeast-1');\n  });\n\n  test('setupAwsCredentials: 認証情報が無い場合は例外', () => {\n    expect(() =>\n      ec2ssh.setupAwsCredentials({ ...dummyConfig, AWS_ACCESS_KEY_ID: undefined }),\n    ).toThrow();\n    expect(() =>\n      ec2ssh.setupAwsCredentials({ ...dummyConfig, AWS_SECRET_ACCESS_KEY: undefined }),\n    ).toThrow();\n  });\n\n  test('startInstance: 正常に呼び出せる', () => {\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: '', stderr: '' });\n    expect(() => ec2ssh.startInstance(dummyConfig)).not.toThrow();\n  });\n\n  test('startInstance: 失敗時は例外', () => {\n    mockSpawnSync.mockReturnValue({ status: 1, stdout: '', stderr: 'error' });\n    expect(() => ec2ssh.startInstance(dummyConfig)).toThrow(/EC2インスタンス起動失敗/);\n  });\n\n  test('waitForInstanceRunning: runningなら即return', () => {\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: 'running', stderr: '' });\n    expect(() => ec2ssh.waitForInstanceRunning(dummyConfig)).not.toThrow();\n  });\n\n  test('waitForInstanceRunning: running以外でTEST_MODE=1なら即return', () => {\n    process.env.TEST_MODE = '1';\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: 'pending', stderr: '' });\n    expect(() => ec2ssh.waitForInstanceRunning(dummyConfig)).not.toThrow();\n    delete process.env.TEST_MODE;\n  });\n\n  test('waitForInstanceRunning: running以外でTEST_MODE未設定時はAtomics.waitが呼ばれる', () => {\n    mockSpawnSync\n      .mockReturnValueOnce({ status: 0, stdout: 'pending', stderr: '' })\n      .mockReturnValueOnce({ status: 0, stdout: 'running', stderr: '' });\n    const atomicsWaitSpy = jest\n      .spyOn(Atomics, 'wait')\n      .mockReturnValue('ok' as ReturnType<typeof Atomics.wait>);\n    expect(() => ec2ssh.waitForInstanceRunning(dummyConfig, 1)).not.toThrow();\n    expect(atomicsWaitSpy).toHaveBeenCalled();\n    atomicsWaitSpy.mockRestore();\n  });\n\n  test('getInstancePublicIp: IP取得成功', () => {\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: '203.0.113.10', stderr: '' });\n    expect(ec2ssh.getInstancePublicIp(dummyConfig)).toBe('203.0.113.10');\n  });\n\n  test('getInstancePublicIp: Noneなら例外', () => {\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: 'None', stderr: '' });\n    expect(() => ec2ssh.getInstancePublicIp(dummyConfig)).toThrow(/パブリックIPが取得できません/);\n  });\n\n  test('sshToInstance: SSH成功', () => {\n    mockSpawnSync.mockReturnValue({ status: 0, stdout: '', stderr: '' });\n    fs.writeFileSync(tempKeyPath, 'dummy');\n    expect(() =>\n      ec2ssh.sshToInstance({ ...dummyConfig, KEY_PATH: tempKeyPath }, '203.0.113.10'),\n    ).not.toThrow();\n  });\n\n  test('sshToInstance: SSH失敗で例外', () => {\n    mockSpawnSync.mockReturnValue({ status: 1, stdout: '', stderr: 'error' });\n    fs.writeFileSync(tempKeyPath, 'dummy');\n    expect(() =>\n      ec2ssh.sshToInstance({ ...dummyConfig, KEY_PATH: tempKeyPath }, '203.0.113.10'),\n    ).toThrow(/SSH接続失敗/);\n  });\n\n  // aws/sshコマンドのモック化例（jest.spyOnやmockImplementationで）\n  // ここではコマンド呼び出し部分のテスト例を追加できます\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/tools/ec2_ssh_start.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]