[{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/bin/dev-env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/jest.config.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\n/* eslint-env node */\nexport default {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testMatch: ['**/test/**/*.test.ts'],\n  moduleFileExtensions: ['ts', 'js', 'json', 'node'],\n  transform: {\n    '^.+\\\\.(ts|tsx)$': 'ts-jest',\n  },\n  extensionsToTreatAsEsm: [],\n  testTimeout: 30000,\n};","usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/lib/dev-env-stack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/dev-env-stack.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/ec2_ssh_start.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/test/ec2_ssh_start/unit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/20m61/Documents/workspace/Ec2-dev-env-setup/tools/ec2_ssh_start.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-constant-condition').","line":57,"column":3,"severity":1,"nodeType":null,"fix":{"range":[1768,1817],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import fs from 'fs';\nimport { spawnSync } from 'child_process';\n\nexport interface Ec2SshConfig {\n  INSTANCE_ID: string;\n  KEY_PATH: string;\n  USER: string;\n  REGION: string;\n  AWS_ACCESS_KEY_ID?: string;\n  AWS_SECRET_ACCESS_KEY?: string;\n  AWS_DEFAULT_REGION?: string;\n}\n\nexport function loadConfig(configPath: string): Ec2SshConfig {\n  if (!fs.existsSync(configPath)) {\n    throw new Error(`設定ファイル ${configPath} が見つかりません。`);\n  }\n  const content = fs.readFileSync(configPath, 'utf-8');\n  const config: Partial<Ec2SshConfig> = {};\n  for (const line of content.split('\\n')) {\n    // セキュリティ: 変数名・値の妥当性を最低限チェック\n    const m = line.match(/^([A-Z_]+)=\"?([^\"]*)\"?$/);\n    if (m && /^[A-Z_][A-Z0-9_]*$/.test(m[1])) {\n      (config as Record<string, string>)[m[1]] = m[2];\n    }\n  }\n  return config as Ec2SshConfig;\n}\n\nexport function ensureAwsCli(): void {\n  if (spawnSync('aws', ['--version']).status !== 0) {\n    throw new Error('aws CLIが見つかりません。インストールしてください。');\n  }\n}\n\nexport function setupAwsCredentials(cfg: Ec2SshConfig): void {\n  if (cfg.AWS_ACCESS_KEY_ID && cfg.AWS_SECRET_ACCESS_KEY) {\n    process.env.AWS_ACCESS_KEY_ID = cfg.AWS_ACCESS_KEY_ID;\n    process.env.AWS_SECRET_ACCESS_KEY = cfg.AWS_SECRET_ACCESS_KEY;\n    process.env.AWS_DEFAULT_REGION = cfg.AWS_DEFAULT_REGION || cfg.REGION;\n  } else {\n    throw new Error('AWS認証情報がありません。aws configureを実行してください。');\n  }\n}\n\nexport function startInstance(cfg: Ec2SshConfig): void {\n  const r = spawnSync(\n    'aws',\n    ['ec2', 'start-instances', '--instance-ids', cfg.INSTANCE_ID, '--region', cfg.REGION],\n    { encoding: 'utf-8' },\n  );\n  if (r.status !== 0) throw new Error('EC2インスタンス起動失敗: ' + (r.stderr || r.stdout));\n}\n\nexport function waitForInstanceRunning(cfg: Ec2SshConfig, sleepMs = 5000): void {\n  let count = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const r = spawnSync(\n      'aws',\n      [\n        'ec2',\n        'describe-instances',\n        '--instance-ids',\n        cfg.INSTANCE_ID,\n        '--region',\n        cfg.REGION,\n        '--query',\n        'Reservations[0].Instances[0].State.Name',\n        '--output',\n        'text',\n      ],\n      { encoding: 'utf-8' },\n    );\n    if (r.stdout.trim() === 'running') break;\n    if (process.env.TEST_MODE === '1') return;\n    if (++count > 60) throw new Error('インスタンス起動がタイムアウトしました');\n    Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, sleepMs);\n  }\n}\n\nexport function getInstancePublicIp(cfg: Ec2SshConfig): string {\n  const r = spawnSync(\n    'aws',\n    [\n      'ec2',\n      'describe-instances',\n      '--instance-ids',\n      cfg.INSTANCE_ID,\n      '--region',\n      cfg.REGION,\n      '--query',\n      'Reservations[0].Instances[0].PublicIpAddress',\n      '--output',\n      'text',\n    ],\n    { encoding: 'utf-8' },\n  );\n  const ip = r.stdout.trim();\n  if (!ip || ip === 'None') throw new Error('パブリックIPが取得できません');\n  return ip;\n}\n\nexport function sshToInstance(cfg: Ec2SshConfig, ip: string): void {\n  fs.chmodSync(cfg.KEY_PATH, 0o600);\n  const r = spawnSync('ssh', ['-i', cfg.KEY_PATH, `${cfg.USER}@${ip}`], { stdio: 'inherit' });\n  if (r.status !== 0) throw new Error('SSH接続失敗');\n}\n\nexport async function main(configPath: string) {\n  const cfg = loadConfig(configPath);\n  ensureAwsCli();\n  setupAwsCredentials(cfg);\n  startInstance(cfg);\n  waitForInstanceRunning(cfg);\n  const ip = getInstancePublicIp(cfg);\n  sshToInstance(cfg, ip);\n}\n","usedDeprecatedRules":[]}]